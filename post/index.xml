<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on DMStory - 大喵的故事</title>
    <link>http://localhost:1313/post/</link>
    <description>Recent content in Posts on DMStory - 大喵的故事</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>DMStory By 董大喵 | &lt;a href=&#34;http://beian.miit.gov.cn&#34; target=&#34;_blank&#34;&gt;冀ICP备20009841号&lt;/a&gt;</copyright>
    <lastBuildDate>Sat, 17 Sep 2022 10:09:15 +0800</lastBuildDate><atom:link href="http://localhost:1313/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>UnityShader-高斯模糊的使用</title>
      <link>http://localhost:1313/post/unity-shader-gaussian-blur/</link>
      <pubDate>Sat, 17 Sep 2022 10:09:15 +0800</pubDate>
      
      <guid>http://localhost:1313/post/unity-shader-gaussian-blur/</guid>
      <description>高斯模糊 高斯模糊是一种常见的图像模糊算法，它使用正太分布的方式计算图像的某一位置与其相邻位置的加权平均值。对于一个二维图像来说，权重的计算，</description>
    </item>
    
    <item>
      <title>Golang基础篇-goroutine</title>
      <link>http://localhost:1313/post/golang-junior-goroutine/</link>
      <pubDate>Sun, 07 Aug 2022 12:00:26 +0800</pubDate>
      
      <guid>http://localhost:1313/post/golang-junior-goroutine/</guid>
      <description>&lt;h2 id=&#34;goroutine&#34;&gt;goroutine&lt;/h2&gt;
&lt;p&gt;goroutine是Golang实现并发的一种手段，在一个Golang程序中，每一个goroutine相当于一个独立的执行单元，这类似于线程，但是并不是线程，而是Golang在语言层面上对线程的一种抽象。&lt;/p&gt;
&lt;p&gt;Golang程序执行的时候默认会创建一个goroutine，可以叫他main goroutine。其他的goroutine需要我们通过&lt;code&gt;go func()&lt;/code&gt;的形式创建。&lt;/p&gt;
&lt;p&gt;这有点类似于一个工厂，工厂里面至少要有一个人员吧，我们称之为老板(main goroutine)，当工厂只有老板一个人时，工厂还是可以正常运转的，所有的事情都需要老板亲历亲为呗。当我们在程序中又创建了一个goroutine时，就相当于招聘了一个员工，这样就可以把一些工作分给员工去做。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang基础篇-接口</title>
      <link>http://localhost:1313/post/golang-junior-interface/</link>
      <pubDate>Sat, 30 Jul 2022 13:56:56 +0800</pubDate>
      
      <guid>http://localhost:1313/post/golang-junior-interface/</guid>
      <description>&lt;p&gt;很多编程语言都提供了接口，Golang接口最大的特点是它可以不必显式定义，只要一个类型实现了某个接口定义的所有方法，那它就实现了这个接口。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用shader实现fillamount效果</title>
      <link>http://localhost:1313/post/unity-shader-sprite-fillamount/</link>
      <pubDate>Sun, 26 Jun 2022 11:12:15 +0800</pubDate>
      
      <guid>http://localhost:1313/post/unity-shader-sprite-fillamount/</guid>
      <description>&lt;p&gt;使用UGUI的Image可以轻松实现进度条的效果。但是有些情况下我们需要制作针对游戏世界中的物体的进度条，例如人物头顶的HP条，机器旁边的CD条等。常规的做法通过将世界坐标映射到UI，然后使用Image制作这些元素。当游戏世界中的物体
位置改变的时候，需要通知UI去改变相应元素的位置，如果需要考虑摄像机对于进度条的影响，例如摄像机拉远时进度条变小，则会更加麻烦。&lt;/p&gt;
&lt;p&gt;这里提供一种使用shader实现进度条的方案。测试环境：Unity 2020.3.32。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang基础篇-结构体扩展</title>
      <link>http://localhost:1313/post/golang-junior-struct-expand/</link>
      <pubDate>Fri, 03 Jun 2022 11:19:05 +0800</pubDate>
      
      <guid>http://localhost:1313/post/golang-junior-struct-expand/</guid>
      <description>&lt;p&gt;结构体扩展允许将多个结构体组合成一个新的结构体，在新的结构体中，允许像访问自己内部成员一样访问内嵌结构体的字段和方法。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Unity协程探究</title>
      <link>http://localhost:1313/post/unity-coroutine-research/</link>
      <pubDate>Sat, 21 May 2022 15:31:34 +0800</pubDate>
      
      <guid>http://localhost:1313/post/unity-coroutine-research/</guid>
      <description>&lt;p&gt;Unity提供了协程来实现一定程度上的“伪并发”。&lt;/p&gt;
&lt;p&gt;众所周知，UnityAPI只能在主线程中调用，如果我们希望通过多线程来实现多个过程的并发处理，那么如果涉及对UnityAPI的操作，则必须转到主线程去执行，比较繁琐。
&lt;a href=&#34;https://docs.unity3d.com/ScriptReference/MonoBehaviour.StartCoroutine.html&#34;&gt;MonoBehaviour.StartCoroutine&lt;/a&gt;可以创建一个协程(Coroutine)，
在协程中可以通过&lt;code&gt;yield&lt;/code&gt;语句暂停程序执行或者退出协程，从游戏运行的宏观角度看，它们似乎是在并行一样。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang基础篇-方法</title>
      <link>http://localhost:1313/post/golang-juinior-method/</link>
      <pubDate>Tue, 03 May 2022 14:39:22 +0800</pubDate>
      
      <guid>http://localhost:1313/post/golang-juinior-method/</guid>
      <description>&lt;h2 id=&#34;函数和方法的区别&#34;&gt;函数和方法的区别&lt;/h2&gt;
&lt;p&gt;函数只是一段代码的执行过程，而方法往往会与某个类型的对象绑定。&lt;/p&gt;
&lt;p&gt;方法是OOP的概念，在一个方法的实现中，我们可以通过特定方式访问对象的私有变量、方法，例如C类语言的this指针，Python的self等，在方法的调用过程中，对象往往被隐式传递。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang基础篇-异常处理</title>
      <link>http://localhost:1313/post/golang-juinior-panic-and-recover/</link>
      <pubDate>Sat, 30 Apr 2022 10:57:15 +0800</pubDate>
      
      <guid>http://localhost:1313/post/golang-juinior-panic-and-recover/</guid>
      <description>&lt;p&gt;Panic是指程序遇到了(或者由程序主动发起)运行时错误，此时，程序中的函数会立即停止执行，然后执行已经defer过的函数，随后，程序输出错误日志信息，停止运行。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang基础篇-defer关键字</title>
      <link>http://localhost:1313/post/golang-junior-defer/</link>
      <pubDate>Sat, 05 Mar 2022 09:03:35 +0800</pubDate>
      
      <guid>http://localhost:1313/post/golang-junior-defer/</guid>
      <description>&lt;p&gt;defer关键字可以延迟一个函数的执行，直到这个函数返回，无论是正常的&lt;code&gt;return&lt;/code&gt;返回，还是由于意外情况。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang基础篇-匿名函数</title>
      <link>http://localhost:1313/post/golang-junior-anonymous-function/</link>
      <pubDate>Sat, 26 Feb 2022 09:50:02 +0800</pubDate>
      
      <guid>http://localhost:1313/post/golang-junior-anonymous-function/</guid>
      <description>&lt;p&gt;当我们定义一个函数时，例如：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Golang&#34; data-lang=&#34;Golang&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;f&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(){&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;statements&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;这种方式只能用在&lt;strong&gt;包一级&lt;/strong&gt;，称为命名函数。这个过程相当于我们定义了一个常量&lt;code&gt;f&lt;/code&gt;，类型为&lt;code&gt;func()&lt;/code&gt;，并且其对应我们刚才定义的函数。
但是有些情况下这种函数定义的方式不够灵活，比如我们希望在调用函数时将某个函数作为参数传入，或者在函数返回时希望返回的是一个函数。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang基础篇-函数</title>
      <link>http://localhost:1313/post/golang-junior-function/</link>
      <pubDate>Sat, 12 Feb 2022 09:19:48 +0800</pubDate>
      
      <guid>http://localhost:1313/post/golang-junior-function/</guid>
      <description>&lt;h2 id=&#34;函数声明&#34;&gt;函数声明&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-Golang&#34; data-lang=&#34;Golang&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;funcName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;param1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;param2&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;paramType1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;param3&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;paramType2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resultType1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;resultType2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;statements&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;函数由&lt;code&gt;func&lt;/code&gt;关键字，函数名称，参数列表，返回值列表，函数体组成。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang基础篇-流程控制</title>
      <link>http://localhost:1313/post/golang-juinior-process-control/</link>
      <pubDate>Tue, 18 Jan 2022 20:16:26 +0800</pubDate>
      
      <guid>http://localhost:1313/post/golang-juinior-process-control/</guid>
      <description>&lt;p&gt;流程控制结构主要包括分支结构、循环结构、标签跳转。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang基础篇-复合类型</title>
      <link>http://localhost:1313/post/golang-junior-complex-type/</link>
      <pubDate>Sun, 09 Jan 2022 10:08:50 +0800</pubDate>
      
      <guid>http://localhost:1313/post/golang-junior-complex-type/</guid>
      <description>&lt;p&gt;Golang复合类型大致分为数组、切片、map、结构体、指针等。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang基础篇-内置类型</title>
      <link>http://localhost:1313/post/golang-junior-built-in-type/</link>
      <pubDate>Wed, 05 Jan 2022 21:23:38 +0800</pubDate>
      
      <guid>http://localhost:1313/post/golang-junior-built-in-type/</guid>
      <description>&lt;p&gt;Golang内置类型大致分为整型、浮点型、复数型、字符(串)型、接口类型、布尔型几类。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Golang基础篇-基本结构</title>
      <link>http://localhost:1313/post/golang-junior-base-structure/</link>
      <pubDate>Sat, 01 Jan 2022 11:21:48 +0800</pubDate>
      
      <guid>http://localhost:1313/post/golang-junior-base-structure/</guid>
      <description>&lt;p&gt;Golang版本：go version go1.17.3 windows/amd64&lt;/p&gt;
&lt;p&gt;学习环境：Visual Studio Code&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>浅谈UGUI优化-网格合并</title>
      <link>http://localhost:1313/post/ugui-optimize-rebatch/</link>
      <pubDate>Sun, 26 Dec 2021 19:11:33 +0800</pubDate>
      
      <guid>http://localhost:1313/post/ugui-optimize-rebatch/</guid>
      <description>&lt;p&gt;之前说到优化DrawCall可以降低CPU在渲染上的开销，那么是不是DrawCall越少就一定越好呢？单纯讨论DrawCall的话，确实是，但是如果为了合并DrawCall需要付出的代价很大，就会得不偿失。网格合并（Rebatch）就是UGUI解决DrawCall问题的代价之一。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>浅谈UGUI优化-网格重建</title>
      <link>http://localhost:1313/post/ugui-optimize-rebuild/</link>
      <pubDate>Sun, 26 Dec 2021 14:22:20 +0800</pubDate>
      
      <guid>http://localhost:1313/post/ugui-optimize-rebuild/</guid>
      <description>&lt;p&gt;在优化的过程中，我们经常会听到Rebatch和Rebuild这两个词，很多人将这两个词混为一谈，其实它们之间虽然有关联但是本质上是两个过程。今天先聊一聊网格重建(Rebuild)，要理解这一过程，就需要先明白为什么会有网格，然后再讨论为什么会重建。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>浅谈UGUI优化-DrawCall篇</title>
      <link>http://localhost:1313/post/ugui-optimize-drawcall/</link>
      <pubDate>Sat, 25 Dec 2021 11:34:43 +0800</pubDate>
      
      <guid>http://localhost:1313/post/ugui-optimize-drawcall/</guid>
      <description>&lt;p&gt;说起UGUI的优化，DrawCall一定是一个绕不开的话题。当然不只是UI优化，Unity中性能优化都会涉及DrawCall的优化。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Hugo快速建立静态网站</title>
      <link>http://localhost:1313/post/use-hugo/</link>
      <pubDate>Sun, 19 Dec 2021 15:01:14 +0800</pubDate>
      
      <guid>http://localhost:1313/post/use-hugo/</guid>
      <description>&lt;p&gt;Hugo是一个开源的，用于快速生成静态站点的工具，同类型的工具还有&lt;a href=&#34;http://jekyllcn.com/&#34;&gt;jekyll&lt;/a&gt;和&lt;a href=&#34;https://hexo.io/zh-cn/&#34;&gt;Hexo&lt;/a&gt;。利用Hugo我们可以用MarkDown的格式书写内容，然后一键生成静态站点，非常方便。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
